---
import User from '../components/User.astro';

interface Props {
	title: string;
	name: string;
}

const { title, name } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Ad-free Valheim info and tools, gear weapons armor food materials, trophy hunt calculator" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/webp" href="/favicon.webp" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
    <script type="module" src="https://cdn.skypack.dev/@supabase/supabase-js"></script>
	</head>
	<body>
		<main class="home-page">
			<header>
				<div>
					<a href="/">
						<img src="/valheim-logo.webp" alt="Valheim" />
					</a>
					<h1>{name}</h1>
          <div id="user-icon" style="display:none">
            <User width="32" height="32" style="vertical-align:middle;margin:0 0.5rem" />
            <span id="user-name">Unknown</span>
          </div>
          <a href="/auth/login" id="user-login" style="margin:0.5rem 0 0 1rem">Login</a>
				</div>
			</header>
			<article>
				<slot />
			</article>
		</main>
    <script>
      

import * as supabase from '@supabase/supabase-js';

const sb = supabase.createClient(
  "https://kkvszipvbsxezcdrgsut.supabase.co",
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtrdnN6aXB2YnN4ZXpjZHJnc3V0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjM2OTk4MDcsImV4cCI6MjAzOTI3NTgwN30.UlRIl7wtwzNr8jW6pjehojKhPjSDE0imkw_IAHgPdIQ",
);

  function updateUser() {
    const userIcon = document.getElementById('user-icon');
    const userLogin = document.getElementById('user-login');
    const userSpan = document.getElementById('user-name');
    var userName = localStorage.getItem('username');
    if (userName) {
      if (userSpan) userSpan.textContent = userName;
      if (userIcon) userIcon.style.display = 'block';
      if (userLogin) userLogin.style.display = 'none';
    } else {
      if (userSpan) userSpan.textContent = '(blank)';
      if (userIcon) userIcon.style.display = 'none';
      if (userLogin)  userLogin.style.display = 'block';
    }
  }

window.addEventListener('DOMContentLoaded', async () => {
  const hash = window.location.hash;
  const params = new URLSearchParams(hash.substring(1));
  const accessToken = params.get('access_token');
  const refreshToken = params.get('refresh_token');
  if (accessToken && refreshToken) {
    localStorage.setItem('access_token', accessToken);
    localStorage.setItem('refresh_token', refreshToken);
    sb.auth.setSession({ access_token: accessToken, refresh_token: refreshToken});
    window.history.replaceState(null, "", ' ');
    console.info('Access token and refresh token stored in local storage and set on session');
    updateUser();
  }

  
  if (localStorage.getItem('username')) {
    updateUser();
  } else {
    const data = await sb.auth.getUser();
    console.debug(data);
    if (data.data.user) {
      var user = data.data.user;
      const userName = user.user_metadata?.custom_claims?.global_name || user.user_metadata?.full_name || user.email || user.phone || user.user_metadata?.name || 'Unknown';
      localStorage.setItem('username', userName);
      updateUser();
    }
  }
});

    </script>
	</body>
</html>
<style is:global>
	:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #fff1a2;
  text-decoration: inherit;
}
a:hover {
  color: gold;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}


main {
  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: auto 1fr;
  grid-template-areas: 
    'header'
    'content';
  height: 100vh;
  width: 100vw;
}

header{
  display:flex;
  justify-content: space-between;
  align-items: center;
  margin:0;
  width:100vw;
  color: white;  
  grid-area: header;
  height:7vh;
}

header>div{
  display:flex;
  align-items: center;
}

header img {
  height:80px;
  margin-left:2rem;
  margin-bottom:-1rem;
}

header h1 {
  margin: 0.3rem 0 0.3rem 1rem;
  font-size: 2rem;
  font-weight: normal;
 }
 
 article {
  overflow-y: scroll;
  overflow-x:auto;
  height: 92vh;
  margin:0;
  padding: 0;
  grid-area: content;
}

@media (max-width: 780px) {
  header h1 {
    display: none;
  }
}
</style>
